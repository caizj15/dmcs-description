http://cn.redux.js.org/docs/basics/Store.html
*************************
前台的基本概念： 
URL-访问什么页面
Data-显示什么信息
View-页面长什么样
Action-对页面做了什么操作
API Server-Data 数据来源

＃URL>Data
react-router-redux可以同步route信息到state
＃Data>View
数据的过滤和筛选

＃redux
 核心概念
**actions*****
　　actions将数据传递给store
　利用action生成器也就是function生成函数
　使用action,利用dispatch方法
***store*******
　　store对象保存应用的状态并提供一些帮助方法来存取状态，分发状态以及注册监听。全部state由一个store来表示。  
***reducers******
  reducer基于数组reduce方法，接收一个回调(reducer)让你从多个值中获取单个值，整数和，或者一个一系列值的累积。在Redux中，reducer就是获取这个应用的当前状态和事件，然后返回一个新状态的函数。
　　
　　import {createStore} from 'redux';
  /**
  **下面是一个reducer，形式为(state,action)=>state的纯函数
  **
　　**
  */
  function counter(state = 0,action){
  switch (action.type) {
  case 'INCREMENT':
    return state + 1;
   case 'DECREMENT':
    return state - 1;
   default:
    return state;
  }
  }
 //创建redux store 来存放应用的状态;
 //API是{ subscribe, dispatch, getState}.
  let store = createStore(counter);
 //　可以手动订阅更新，也可以事件绑定到视图层
   store.subscribe(() => 
     console.log(store.getState())
   );
 //改变内部 state 唯一方法是dispatch　一个action
　store.dispatch({type: 'INCREMENT'}); ///将type赋值为INCREMENT则发出action，该函数触发
                                      ///reducer，从而使得state发生变化

*****redux中的核心概念*******
要想更新state中的数据，必须发起一个action.　Action就是一个普通的Js对象。
action的示例:
　{ type:'ADD_TODO', text:'Go to swimming pool'}
action的好处就是知道应用中到底发生了什么。为了把action和state串起来，开发函数reducer(完成大部分功能)
　　reducer只是一个接收state和action,并返回新的state函数：

　function visibiityFilter(state =　'SHOW_ALL', action){
  if (action.type === 'SET_VISIBILITY_FILTER') {
   return action.filter;
  }else {
  return state;
  }
 }

  function todos(state =[],action){
 switch (action.type){
 case 'ADD_TODO':
  return state.concat([{text:action.text, completed: false}]);
 case 'TOGGLE_TODO':
  return state.map((todo, index)=>
    action.index === index ?
     {text: todo.text, completed: !todo.completed }:
     todo
   )
 default:
   return state;
  }
}
 //开发一个reducer调用这两个reducer，进而管理整个应用
 function todoApp (state= {}, action){
   return {
     todos: todos(state.todos, action),
     visibiityFilter: visibilityFilter (state.visibilityFilter, action)
 };
}
 ＃Redux的主要想法是如何根据action对象来更新state*******这一点自己没有搞清楚

*************三大原则*************
****单一数据源*****
****State是只读的*******
唯一改变state的方法就是触发action,action是一个用于描述已发生事件的普通对象.

视图和网络请求都不能直接修改state，相反他们只能表达想要修改的意图。
所有的修改都被集中化处理，且按照一个接一个的顺序执行，不用担心race condition的出现。

****使用纯函数来执行修改*******
为了描述action如何修改state tree，需要编写reducers

*********reducer&action************
 state 的结构如下:
{
  visibilityFilter: 'SHOW_ALL'
  todos: [
    {
      text: 'Consider using Redux',
      completes:true,
    },
    { 
      text: 'Keep all state in a single tree',
      completed: false
    }
 ]
} 

**Action处理****
 reducer就是一个纯函数,不要执行任何有副作用的操作;
　(previousState, action) => newState
 
****store******
  actions用来描述发生了什么，reducers根据action来更新state;
  但是二者如何连接起来，这需要store，主要有以下职责；
　　　>维持应用的state;
   >提供getState()方法获取state;
   >提供dispatch(action) 方法更新state;
   >通过subscribe(listener)注册监听器;
   >通过subscribe(listener)返回的函数注销监听器;
  
****
